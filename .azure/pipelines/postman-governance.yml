trigger:
  branches:
    include:
    - main
    - feature/*
  paths:
    include:
    - api-specs/*

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: postman-secrets  # Contains POSTMAN_API_KEY and UPS_WORKSPACE_ID
- name: GOVERNANCE_THRESHOLD
  value: 70

steps:
- task: NodeTool@0
  displayName: 'Install Node.js'
  inputs:
    versionSpec: '18.x'
    
- script: |
    curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
    export PATH="$HOME/.local/bin:$PATH"
    postman -v
  displayName: 'Install Postman CLI'

- script: |
    export PATH="$HOME/.local/bin:$PATH"
    postman login --with-api-key $(POSTMAN_API_KEY)
  displayName: 'Login to Postman Enterprise'

- script: |
    # Install spectral for additional linting
    npm install -g @stoplight/spectral-cli
  displayName: 'Install Spectral CLI'

- script: |
    echo "Running governance checks on API specifications..."
    
    # Run spectral linting first
    for spec_file in api-specs/*.yaml api-specs/*.yml; do
      if [ -f "$spec_file" ]; then
        echo "Linting $spec_file with Spectral..."
        spectral lint "$spec_file" --format json > "$(basename $spec_file .yaml).spectral.json" || true
      fi
    done
  displayName: 'Run Spectral Linting'

- script: |
    # Score APIs using our custom scorer
    export POSTMAN_API_KEY=$(POSTMAN_API_KEY)
    
    # Generate individual reports
    for spec_file in api-specs/*.yaml api-specs/*.yml; do
      if [ -f "$spec_file" ]; then
        echo "Scoring $spec_file..."
        node scripts/ups_postman_governance.js \
          --api "$spec_file" \
          --threshold $(GOVERNANCE_THRESHOLD) \
          --json > "$(basename $spec_file .yaml).score.json"
        
        # Extract score for display
        score=$(cat "$(basename $spec_file .yaml).score.json" | jq '.[0].score')
        status=$(cat "$(basename $spec_file .yaml).score.json" | jq -r '.[0].status')
        
        echo "API: $(basename $spec_file) - Score: $score/100 - Status: $status"
        
        if [ "$status" = "FAIL" ]; then
          echo "[FAILED] $(basename $spec_file) does not meet governance threshold of $(GOVERNANCE_THRESHOLD)"
          exit 1
        fi
      fi
    done
  displayName: 'Run Governance Quality Gate'
  continueOnError: true

- script: |
    # Generate consolidated dashboard
    export POSTMAN_API_KEY=$(POSTMAN_API_KEY)
    
    if [ -n "$(UPS_WORKSPACE_ID)" ]; then
      node scripts/ups_postman_governance.js \
        --workspace $(UPS_WORKSPACE_ID) \
        --threshold $(GOVERNANCE_THRESHOLD) \
        --output governance-dashboard.html
    else
      echo "No workspace ID configured, generating demo dashboard..."
      # Create a demo dashboard from local files
      echo '<!DOCTYPE html><html><head><title>Governance Report</title></head><body>' > governance-dashboard.html
      echo '<h1>API Governance Report</h1>' >> governance-dashboard.html
      for score_file in *.score.json; do
        if [ -f "$score_file" ]; then
          echo "<h2>$(basename $score_file .score.json)</h2>" >> governance-dashboard.html
          echo "<pre>$(cat $score_file | jq .)</pre>" >> governance-dashboard.html
        fi
      done
      echo '</body></html>' >> governance-dashboard.html
    fi
  displayName: 'Generate Governance Dashboard'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Governance Reports'
  inputs:
    pathToPublish: '*.json'
    artifactName: 'governance-reports'
  condition: always()

- task: PublishBuildArtifacts@1
  displayName: 'Publish Governance Dashboard'
  inputs:
    pathToPublish: 'governance-dashboard.html'
    artifactName: 'governance-dashboard'
  condition: always()

- task: PublishTestResults@2
  displayName: 'Publish Governance Test Results'
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/test-results.xml'
    failTaskOnFailedTests: true
  condition: always()
  continueOnError: true

- script: |
    # Post results to PR if this is a PR build
    if [ -n "$(System.PullRequest.PullRequestId)" ]; then
      echo "Posting governance results to PR #$(System.PullRequest.PullRequestId)"
      
      # Calculate overall stats
      total_apis=$(ls api-specs/*.yaml api-specs/*.yml 2>/dev/null | wc -l)
      passed_apis=$(grep -l '"status":"PASS"' *.score.json 2>/dev/null | wc -l || echo 0)
      failed_apis=$((total_apis - passed_apis))
      
      comment="## API Governance Report
      
      **Total APIs Checked:** $total_apis
      **Passed:** $passed_apis
      **Failed:** $failed_apis
      **Threshold:** $(GOVERNANCE_THRESHOLD)/100
      
      View the full [governance dashboard]($(System.CollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=artifacts) for details."
      
      # Note: In production, you would use Azure DevOps REST API to post this comment
      echo "$comment"
    fi
  displayName: 'Post Results to PR'
  condition: and(succeeded(), ne(variables['System.PullRequest.PullRequestId'], ''))