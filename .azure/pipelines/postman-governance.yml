# Enhanced Azure DevOps Pipeline with GitHub Actions feature parity
# Supports manual triggers, PR comments, caching, and job summaries

parameters:
  - name: runManually
    displayName: 'Manual Run'
    type: boolean
    default: false
  - name: governanceThreshold
    displayName: 'Governance Threshold (0-100)'
    type: number
    default: 70
    values:
      - 50
      - 60
      - 70
      - 80
      - 90

trigger:
  branches:
    include:
    - main
    - feature/*
  paths:
    include:
    - api-specs/*

pr:
  branches:
    include:
    - main
  paths:
    include:
    - api-specs/*

variables:
- group: postman-secrets  # Contains POSTMAN_API_KEY and UPS_WORKSPACE_ID
- name: GOVERNANCE_THRESHOLD
  value: ${{ parameters.governanceThreshold }}
- name: npm_config_cache
  value: $(Pipeline.Workspace)/.npm

jobs:
- job: GovernanceCheck
  displayName: 'API Governance Check'
  pool:
    vmImage: 'ubuntu-22.04'
  steps:
  - task: NodeTool@0
    displayName: 'Install Node.js'
    inputs:
      versionSpec: '20.x'
  
  # NPM Caching for faster builds
  - task: Cache@2
    displayName: 'Cache NPM packages'
    inputs:
      key: 'npm | "$(Agent.OS)" | package-lock.json'
      restoreKeys: |
        npm | "$(Agent.OS)"
      path: $(npm_config_cache)
      
  - script: |
      npm ci --cache $(npm_config_cache)
    displayName: 'Install npm dependencies (with cache)'
    
  - script: |
      npm install -g postman
    displayName: 'Install Postman CLI'
    
  - script: |
      postman login --with-api-key $(POSTMAN_API_KEY)
    displayName: 'Login to Postman'
    
  - script: |
      sudo apt-get update -y
      sudo apt-get install -y jq
    displayName: 'Install jq for JSON processing'
    
  - script: |
      echo "Uploading API specifications to Postman Spec Hub..."
      node scripts/upload_specs_to_postman.js reupload-all
      
      echo "Updating spec-ids.json with current workspace specs..."
      node scripts/update_spec_ids.js
    displayName: 'Upload Specs to Postman (Idempotent)'
    continueOnError: true

  - script: |
      # Score APIs using workspace-based governance
      export POSTMAN_API_KEY=$(POSTMAN_API_KEY)
      
      # Generate workspace governance report
      node scripts/ups_postman_governance.js \
        --workspace $(UPS_WORKSPACE_ID) \
        --threshold $(GOVERNANCE_THRESHOLD) \
        --json > governance-report.json
      
      # Check for failures and capture stats
      failed_count=$(cat governance-report.json | jq '[.[] | select(.status == "FAIL")] | length')
      total_count=$(cat governance-report.json | jq '. | length')
      passed_count=$((total_count - failed_count))
      
      echo "Governance Report: $failed_count/$total_count APIs failed"
      
      # Set variables for later steps
      echo "##vso[task.setvariable variable=failed_count;isoutput=true]$failed_count"
      echo "##vso[task.setvariable variable=total_count;isoutput=true]$total_count"
      echo "##vso[task.setvariable variable=passed_count;isoutput=true]$passed_count"
      
      if [ "$failed_count" -gt 0 ]; then
        echo "##[error]$failed_count APIs do not meet governance threshold of $(GOVERNANCE_THRESHOLD)"
        cat governance-report.json | jq '.[] | select(.status == "FAIL") | "\(.name): \(.score)/100"'
        exit 1
      fi
    displayName: 'Run Governance Quality Gate'
    name: governanceCheck

  - script: |
      # Generate consolidated dashboard
      export POSTMAN_API_KEY=$(POSTMAN_API_KEY)
      
      node scripts/ups_postman_governance.js \
        --workspace $(UPS_WORKSPACE_ID) \
        --threshold $(GOVERNANCE_THRESHOLD) \
        --output governance-dashboard.html
        
      echo "Dashboard generated successfully"
    displayName: 'Generate Governance Dashboard'
    condition: always()

  - task: PublishPipelineArtifact@1
    displayName: 'Publish Governance Reports'
    inputs:
      targetPath: 'governance-report.json'
      artifactName: 'governance-reports'
    condition: always()

  - task: PublishPipelineArtifact@1
    displayName: 'Publish Governance Dashboard'
    inputs:
      targetPath: 'governance-dashboard.html'
      artifactName: 'governance-dashboard'
    condition: always()

  # Create Job Summary using Azure DevOps logging commands
  - script: |
      if [ -f governance-report.json ]; then
        total=$(cat governance-report.json | jq '. | length')
        passed=$(cat governance-report.json | jq '[.[] | select(.status == "PASS")] | length')
        failed=$(cat governance-report.json | jq '[.[] | select(.status == "FAIL")] | length')
        
        # Create markdown summary
        summary="## API Governance Check Summary\n\n"
        summary+="| Metric | Value |\n"
        summary+="|--------|-------|\n"
        summary+="| Total APIs | $total |\n"
        summary+="| Passed | $passed |\n"
        summary+="| Failed | $failed |\n"
        summary+="| Threshold | $(GOVERNANCE_THRESHOLD)/100 |\n"
        
        if [ "$failed" -gt 0 ]; then
          summary+="\n### Failed APIs\n"
          failed_apis=$(cat governance-report.json | jq -r '.[] | select(.status == "FAIL") | "- \(.name): \(.score)/100"')
          summary+="$failed_apis"
        fi
        
        # Save summary to file and upload it
        echo -e "$summary" > governance-summary.md
        echo "##vso[task.uploadsummary]$(System.DefaultWorkingDirectory)/governance-summary.md"
        
        # Also log colored output
        echo "##[section]Governance Results"
        if [ "$failed" -gt 0 ]; then
          echo "##[warning]$failed APIs failed governance checks"
        else
          echo "##[command]All APIs passed governance checks!"
        fi
      fi
    displayName: 'Create Job Summary'
    condition: always()

  # Post PR Comment using Azure DevOps REST API
  - script: |
      if [ -n "$(System.PullRequest.PullRequestId)" ]; then
        echo "Posting governance results to PR #$(System.PullRequest.PullRequestId)"
        
        # Calculate stats from governance report
        total_apis=$(cat governance-report.json | jq '. | length')
        passed_apis=$(cat governance-report.json | jq '[.[] | select(.status == "PASS")] | length')
        failed_apis=$(cat governance-report.json | jq '[.[] | select(.status == "FAIL")] | length')
        
        # Get failed APIs list
        failed_list=""
        if [ "$failed_apis" -gt 0 ]; then
          failed_list=$(cat governance-report.json | jq -r '.[] | select(.status == "FAIL") | "- \(.name): \(.score)/100"')
          failed_section="### Failed APIs:\n$failed_list\n"
        else
          failed_section="### All APIs passed governance checks!\n"
        fi
        
        # Create PR comment
        comment_body="## API Governance Report\n\n"
        comment_body+="**Total APIs Checked:** $total_apis\n"
        comment_body+="**Passed:** $passed_apis\n"
        comment_body+="**Failed:** $failed_apis\n"
        comment_body+="**Threshold:** $(GOVERNANCE_THRESHOLD)/100\n\n"
        comment_body+="$failed_section\n"
        comment_body+="View the full [governance dashboard]($(System.CollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=artifacts) for details.\n\n"
        comment_body+="---\n*Generated by UPS API Governance Check*"
        
        # Post comment via REST API
        PR_COMMENT_API="$(System.CollectionUri)$(System.TeamProject)/_apis/git/repositories/$(Build.Repository.ID)/pullRequests/$(System.PullRequest.PullRequestId)/threads?api-version=7.0"
        
        # Create JSON payload
        cat > pr_comment.json << EOF
        {
          "comments": [
            {
              "parentCommentId": 0,
              "content": "$comment_body",
              "commentType": 1
            }
          ],
          "status": 1
        }
        EOF
        
        # Post the comment
        curl -X POST "$PR_COMMENT_API" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $(System.AccessToken)" \
          -d @pr_comment.json \
          --fail-with-body || echo "##[warning]Failed to post PR comment"
        
        rm pr_comment.json
      fi
    displayName: 'Post Results to PR'
    condition: and(always(), ne(variables['System.PullRequest.PullRequestId'], ''))
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)

  - script: |
      # Only send Teams notification if webhook URL is configured
      if [ -n "$(TEAMS_WEBHOOK_URL)" ]; then
        export TEAMS_WEBHOOK_URL=$(TEAMS_WEBHOOK_URL)
        export BUILD_URL="$(System.CollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=artifacts"
        node scripts/teams_notifier.js --batch governance-report.json
      else
        echo "TEAMS_WEBHOOK_URL not configured, skipping Teams notification"
      fi
    displayName: 'Send Teams Governance Summary'
    condition: always()
    continueOnError: true