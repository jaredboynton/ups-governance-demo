trigger:
  branches:
    include:
    - main
    - feature/*
  paths:
    include:
    - api-specs/*

variables:
- group: postman-secrets  # Contains POSTMAN_API_KEY and UPS_WORKSPACE_ID
- name: GOVERNANCE_THRESHOLD
  value: 70

jobs:
- job: GovernanceCheck
  displayName: 'API Governance Check'
  pool:
    vmImage: 'ubuntu-22.04'  # Using ubuntu-22.04 explicitly as ubuntu-20.04 is deprecated in 2025
  steps:
  - task: NodeTool@0
    displayName: 'Install Node.js'
    inputs:
      versionSpec: '20.x'  # Updated to Node.js 20 LTS
      
  - script: |
      npm install -g postman
    displayName: 'Install Postman CLI'
    
  - script: |
      npm install
    displayName: 'Install npm dependencies'

  - script: |
      postman login --with-api-key $(POSTMAN_API_KEY)
    displayName: 'Login to Postman'

  - script: |
      sudo apt-get update -y
      sudo apt-get install -y jq
    displayName: 'Install jq for JSON processing'

  # Spectral linting is now integrated in Postman CLI

  - script: |
      echo "Uploading API specifications to Postman Spec Hub..."
      node scripts/upload_specs_to_postman.js reupload-all
      
      echo "Updating spec-ids.json with current workspace specs..."
      node scripts/update_spec_ids.js
    displayName: 'Upload Specs to Postman (Idempotent)'
    continueOnError: true

  - script: |
      # Score APIs using workspace-based governance
      export POSTMAN_API_KEY=$(POSTMAN_API_KEY)
      
      # Generate workspace governance report
      node scripts/ups_postman_governance.js \
        --workspace $(UPS_WORKSPACE_ID) \
        --threshold $(GOVERNANCE_THRESHOLD) \
        --json > governance-report.json
      
      # Check for failures
      failed_count=$(cat governance-report.json | jq '[.[] | select(.status == "FAIL")] | length')
      total_count=$(cat governance-report.json | jq '. | length')
      
      echo "Governance Report: $failed_count/$total_count APIs failed"
      
      if [ "$failed_count" -gt 0 ]; then
        echo "[FAILED] $failed_count APIs do not meet governance threshold of $(GOVERNANCE_THRESHOLD)"
        cat governance-report.json | jq '.[] | select(.status == "FAIL") | "\(.name): \(.score)/100"'
        exit 1
      fi
    displayName: 'Run Governance Quality Gate'

  - script: |
      # Generate consolidated dashboard
      export POSTMAN_API_KEY=$(POSTMAN_API_KEY)
      
      node scripts/ups_postman_governance.js \
        --workspace $(UPS_WORKSPACE_ID) \
        --threshold $(GOVERNANCE_THRESHOLD) \
        --output governance-dashboard.html
        
      echo "Dashboard generated successfully"
    displayName: 'Generate Governance Dashboard'

  - task: PublishPipelineArtifact@1
    displayName: 'Publish Governance Reports'
    inputs:
      targetPath: 'governance-report.json'
      artifactName: 'governance-reports'
    condition: always()

  - task: PublishPipelineArtifact@1
    displayName: 'Publish Governance Dashboard'
    inputs:
      targetPath: 'governance-dashboard.html'
      artifactName: 'governance-dashboard'
    condition: always()

  - script: |
      # Only send Teams notification if webhook URL is configured
      if [ -n "$(TEAMS_WEBHOOK_URL)" ]; then
        export TEAMS_WEBHOOK_URL=$(TEAMS_WEBHOOK_URL)
        export BUILD_URL="$(System.CollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=artifacts"
        node scripts/teams_notifier.js --batch governance-report.json
      else
        echo "TEAMS_WEBHOOK_URL not configured, skipping Teams notification"
      fi
    displayName: 'Send Teams Governance Summary'
    condition: always()
    continueOnError: true

  # Test results publishing removed - using artifact publishing instead

  - script: |
      # Post results to PR if this is a PR build
      if [ -n "$(System.PullRequest.PullRequestId)" ]; then
        echo "Posting governance results to PR #$(System.PullRequest.PullRequestId)"
        
        # Calculate overall stats from governance report
        total_apis=$(cat governance-report.json | jq '. | length')
        passed_apis=$(cat governance-report.json | jq '[.[] | select(.status == "PASS")] | length')
        failed_apis=$(cat governance-report.json | jq '[.[] | select(.status == "FAIL")] | length')
        
        comment="## API Governance Report
        
        **Total APIs Checked:** $total_apis
        **Passed:** $passed_apis
        **Failed:** $failed_apis
        **Threshold:** $(GOVERNANCE_THRESHOLD)/100
        
        View the full [governance dashboard]($(System.CollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=artifacts) for details."
        
        # Note: In production, you would use Azure DevOps REST API to post this comment
        echo "$comment"
      fi
    displayName: 'Post Results to PR'
    condition: and(succeeded(), ne(variables['System.PullRequest.PullRequestId'], ''))